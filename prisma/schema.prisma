// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(cuid())
  name               String
  email              String         @unique
  emailVerified      DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  image              String?
  currentLinkID      String?
  currentLinkLabel   String?        @db.VarChar(50)
  questionsLinks     Json?
  questions          Json?
  couple             Couple?        @relation(fields: [coupleID], references: [id])
  coupleID           Int?
  partnerID          String?
  recievedRequest    String?
  sendRequest        String?
  currentStreak      Int            @default(0)
  highestStreak      Int            @default(0)
  nextQuestionsTime  DateTime?
  timeOfLastAnswered DateTime? //Used for notifications
  accounts           Account[]
  sessions           Session[]
  CoupleAnswer       CoupleAnswer[]
}

model Couple {
  id            Int      @id @default(autoincrement())
  initiated     String
  accepted      String
  questionIndex Int      @default(0)
  startDate     DateTime @default(now())
  User          User[]
}

model CoupleAnswer {
  id         Int          @id @default(autoincrement())
  coupleID   Int
  questionID Int
  answer     String
  time       DateTime     @default(now())
  day        DateTime
  question   QuestionBank @relation(fields: [questionID], references: [id])
  user       User?        @relation(fields: [userID], references: [id])
  userID     String

  @@unique([id, userID])
}

model CustomAnswer {
  id             Int     @id @default(autoincrement())
  questionLinkID String
  question       String  @db.VarChar(280)
  answer         String  @db.VarChar(280)
  questionBy     String
  userId         String?
}

model QuestionBank {
  id           Int            @id @default(autoincrement())
  question     String
  createdAt    DateTime       @default(now())
  CoupleAnswer CoupleAnswer[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
